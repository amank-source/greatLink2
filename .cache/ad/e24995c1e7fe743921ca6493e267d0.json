{"id":"../node_modules/libpq/index.js","dependencies":[{"name":"/Users/fakhan/great-link-2/package.json","includedInParent":true,"mtime":1609798652689},{"name":"/Users/fakhan/great-link-2/node_modules/libpq/package.json","includedInParent":true,"mtime":1609798687369},{"name":"bindings","loc":{"line":1,"column":34},"parent":"/Users/fakhan/great-link-2/node_modules/libpq/index.js","resolved":"/Users/fakhan/great-link-2/node_modules/bindings/bindings.js"},{"name":"path","loc":{"line":6,"column":21},"parent":"/Users/fakhan/great-link-2/node_modules/libpq/index.js","resolved":"/Users/fakhan/great-link-2/node_modules/path-browserify/index.js"},{"name":"events","loc":{"line":10,"column":27},"parent":"/Users/fakhan/great-link-2/node_modules/libpq/index.js","resolved":"/Users/fakhan/great-link-2/node_modules/events/events.js"},{"name":"assert","loc":{"line":11,"column":21},"parent":"/Users/fakhan/great-link-2/node_modules/libpq/index.js","resolved":"/Users/fakhan/great-link-2/node_modules/assert/assert.js"},{"name":"process","parent":"/Users/fakhan/great-link-2/node_modules/libpq/index.js","resolved":"/Users/fakhan/great-link-2/node_modules/process/browser.js"},{"name":"buffer","parent":"/Users/fakhan/great-link-2/node_modules/libpq/index.js","resolved":"/Users/fakhan/great-link-2/node_modules/buffer/index.js"}],"generated":{"js":"var __dirname = \"/Users/fakhan/great-link-2/node_modules/libpq\";\nvar process = require(\"process\");\nvar Buffer = require(\"buffer\").Buffer;\nvar PQ = module.exports = require('bindings')('addon.node').PQ;\n\n//print out the include dir\n//if you want to include this in a binding.gyp file\nif(!module.parent) {\n  var path = require('path');\n  console.log(path.normalize(__dirname + '/src'));\n}\n\nvar EventEmitter = require('events').EventEmitter;\nvar assert = require('assert');\n\nfor(var key in EventEmitter.prototype) {\n  PQ.prototype[key] = EventEmitter.prototype[key];\n}\n\n//SYNC connects to the server\n//throws an exception in the event of a connection error\nPQ.prototype.connectSync = function(paramString) {\n  this.connected = true;\n  if(!paramString) {\n    paramString = '';\n  }\n  var connected = this.$connectSync(paramString);\n  if(!connected) {\n    var err = new Error(this.errorMessage());\n    this.finish();\n    throw err;\n  }\n};\n\n//connects async using a background thread\n//calls the callback with an error if there was one\nPQ.prototype.connect = function(paramString, cb) {\n  this.connected = true;\n  if(typeof paramString == 'function') {\n    cb = paramString;\n    paramString = '';\n  }\n  if(!paramString) {\n    paramString = '';\n  }\n  assert(cb, 'Must provide a connection callback');\n  if(process.domain) {\n    cb = process.domain.bind(cb);\n  }\n  this.$connect(paramString, cb);\n};\n\nPQ.prototype.errorMessage = function() {\n  return this.$getLastErrorMessage();\n};\n\n//returns an int for the fd of the socket\nPQ.prototype.socket = function() {\n  return this.$socket();\n};\n\n// return server version number e.g. 90300\nPQ.prototype.serverVersion = function () {\n  return this.$serverVersion();\n};\n\n//finishes the connection & closes it\nPQ.prototype.finish = function() {\n  this.connected = false;\n  this.$finish();\n};\n\n////SYNC executes a plain text query\n//immediately stores the results within the PQ object for consumption with\n//ntuples, getvalue, etc...\n//returns false if there was an error\n//consume additional error details via PQ#errorMessage & friends\nPQ.prototype.exec = function(commandText) {\n  if(!commandText) {\n    commandText = '';\n  }\n  this.$exec(commandText);\n};\n\n//SYNC executes a query with parameters\n//immediately stores the results within the PQ object for consumption with\n//ntuples, getvalue, etc...\n//returns false if there was an error\n//consume additional error details via PQ#errorMessage & friends\nPQ.prototype.execParams = function(commandText, parameters) {\n  if(!commandText) {\n    commandText = '';\n  }\n  if(!parameters) {\n    parameters = [];\n  }\n  this.$execParams(commandText, parameters);\n};\n\n//SYNC prepares a named query and stores the result\n//immediately stores the results within the PQ object for consumption with\n//ntuples, getvalue, etc...\n//returns false if there was an error\n//consume additional error details via PQ#errorMessage & friends\nPQ.prototype.prepare = function(statementName, commandText, nParams) {\n  assert.equal(arguments.length, 3, 'Must supply 3 arguments');\n  if(!statementName) {\n    statementName = '';\n  }\n  if(!commandText) {\n    commandText = '';\n  }\n  nParams = Number(nParams) || 0;\n  this.$prepare(statementName, commandText, nParams);\n};\n\n//SYNC executes a named, prepared query and stores the result\n//immediately stores the results within the PQ object for consumption with\n//ntuples, getvalue, etc...\n//returns false if there was an error\n//consume additional error details via PQ#errorMessage & friends\nPQ.prototype.execPrepared = function(statementName, parameters) {\n  if(!statementName) {\n    statementName = '';\n  }\n  if(!parameters) {\n    parameters = [];\n  }\n  this.$execPrepared(statementName, parameters);\n};\n\n//send a command to begin executing a query in async mode\n//returns true if sent, or false if there was a send failure\nPQ.prototype.sendQuery = function(commandText) {\n  if(!commandText) {\n    commandText = '';\n  }\n  return this.$sendQuery(commandText);\n};\n\n//send a command to begin executing a query with parameters in async mode\n//returns true if sent, or false if there was a send failure\nPQ.prototype.sendQueryParams = function(commandText, parameters) {\n  if(!commandText) {\n    commandText = '';\n  }\n  if(!parameters) {\n    parameters = [];\n  }\n  return this.$sendQueryParams(commandText, parameters);\n};\n\n//send a command to prepare a named query in async mode\n//returns true if sent, or false if there was a send failure\nPQ.prototype.sendPrepare = function(statementName, commandText, nParams) {\n  assert.equal(arguments.length, 3, 'Must supply 3 arguments');\n  if(!statementName) {\n    statementName = '';\n  }\n  if(!commandText) {\n    commandText = '';\n  }\n  nParams = Number(nParams) || 0;\n  return this.$sendPrepare(statementName, commandText, nParams);\n};\n\n//send a command to execute a named query in async mode\n//returns true if sent, or false if there was a send failure\nPQ.prototype.sendQueryPrepared = function(statementName, parameters) {\n  if(!statementName) {\n    statementName = '';\n  }\n  if(!parameters) {\n    parameters = [];\n  }\n  return this.$sendQueryPrepared(statementName, parameters);\n};\n\n//'pops' a result out of the buffered\n//response data read during async command execution\n//and stores it on the c/c++ object so you can consume\n//the data from it.  returns true if there was a pending result\n//or false if there was no pending result. if there was no pending result\n//the last found result is not overwritten so you can call getResult as many\n//times as you want, and you'll always have the last available result for consumption\nPQ.prototype.getResult = function() {\n  return this.$getResult();\n};\n\n//returns a text of the enum associated with the result\n//usually just PGRES_COMMAND_OK or PGRES_FATAL_ERROR\nPQ.prototype.resultStatus = function() {\n  return this.$resultStatus();\n};\n\nPQ.prototype.resultErrorMessage = function() {\n  return this.$resultErrorMessage();\n};\n\nPQ.prototype.resultErrorFields = function() {\n  return this.$resultErrorFields();\n};\n\n//free the memory associated with a result\n//this is somewhat handled for you within the c/c++ code\n//by never allowing the code to 'leak' a result. still,\n//if you absolutely want to free it yourself, you can use this.\nPQ.prototype.clear = function() {\n  this.$clear();\n};\n\n//returns the number of tuples (rows) in the result set\nPQ.prototype.ntuples = function() {\n  return this.$ntuples();\n};\n\n//returns the number of fields (columns) in the result set\nPQ.prototype.nfields = function() {\n  return this.$nfields();\n};\n\n//returns the name of the field (column) at the given offset\nPQ.prototype.fname = function(offset) {\n  return this.$fname(offset);\n};\n\n//returns the Oid of the type for the given field\nPQ.prototype.ftype = function(offset) {\n  return this.$ftype(offset);\n};\n\n//returns a text value at the given row/col\n//if the value is null this still returns empty string\n//so you need to use PQ#getisnull to determine\nPQ.prototype.getvalue = function(row, col) {\n  return this.$getvalue(row, col);\n};\n\n//returns true/false if the value is null\nPQ.prototype.getisnull = function(row, col) {\n  return this.$getisnull(row, col);\n};\n\n//returns the status of the command\nPQ.prototype.cmdStatus = function() {\n  return this.$cmdStatus();\n};\n\n//returns the tuples in the command\nPQ.prototype.cmdTuples = function() {\n  return this.$cmdTuples();\n};\n\n//starts the 'read ready' libuv socket listener.\n//Once the socket becomes readable, the PQ instance starts\n//emitting 'readable' events.  Similar to how node's readable-stream\n//works except to clear the SELECT() notification you need to call\n//PQ#consumeInput instead of letting node pull the data off the socket\n//http://www.postgresql.org/docs/9.1/static/libpq-async.html\nPQ.prototype.startReader = function() {\n  assert(this.connected, 'Must be connected to start reader');\n  this.$startRead();\n};\n\n//suspends the libuv socket 'read ready' listener\nPQ.prototype.stopReader = function() {\n  this.$stopRead();\n};\n\nPQ.prototype.writable = function(cb) {\n  assert(this.connected, 'Must be connected to start writer');\n  this.$startWrite();\n  return this.once('writable', cb);\n};\n\n//returns boolean - false indicates an error condition\n//e.g. a failure to consume input\nPQ.prototype.consumeInput = function() {\n  return this.$consumeInput();\n};\n\n//returns true if PQ#getResult would cause\n//the process to block waiting on results\n//false indicates PQ#getResult can be called\n//with an assurance of not blocking\nPQ.prototype.isBusy = function() {\n  return this.$isBusy();\n};\n\n//toggles the socket blocking on outgoing writes\nPQ.prototype.setNonBlocking = function(truthy) {\n  return this.$setNonBlocking(truthy ? 1 : 0);\n};\n\n//returns true if the connection is non-blocking on writes, otherwise false\n//note: connection is always non-blocking on reads if using the send* methods\nPQ.prototype.isNonBlocking = function() {\n  return this.$isNonBlocking();\n};\n\n//returns 1 if socket is not write-ready\n//returns 0 if all data flushed to socket\n//returns -1 if there is an error\nPQ.prototype.flush = function() {\n  return this.$flush();\n};\n\n//escapes a literal and returns the escaped string\n//I'm not 100% sure this doesn't do any I/O...need to check that\nPQ.prototype.escapeLiteral = function(input) {\n  if(!input) return input;\n  return this.$escapeLiteral(input);\n};\n\nPQ.prototype.escapeIdentifier = function(input) {\n  if(!input) return input;\n  return this.$escapeIdentifier(input);\n};\n\n//Checks for any notifications which may have arrivied\n//and returns them as a javascript object: {relname: 'string', extra: 'string', be_pid: int}\n//if there are no pending notifications this returns undefined\nPQ.prototype.notifies = function() {\n  return this.$notifies();\n};\n\n//Sends a buffer of binary data to the server\n//returns 1 if the command was sent successfully\n//returns 0 if the command would block (use PQ#writable here if so)\n//returns -1 if there was an error\nPQ.prototype.putCopyData = function(buffer) {\n  assert(buffer instanceof Buffer);\n  return this.$putCopyData(buffer);\n};\n\n//Sends a command to 'finish' the copy\n//if an error message is passed, it will be sent to the\n//backend and signal a request to cancel the copy in\n//returns 1 if sent succesfully\n//returns 0 if the command would block\n//returns -1 if there was an error\nPQ.prototype.putCopyEnd = function(errorMessage) {\n  if(errorMessage) {\n    return this.$putCopyEnd(errorMessage);\n  }\n  return this.$putCopyEnd();\n};\n\n//Gets a buffer of data from a copy out command\n//if async is passed as true it will not block waiting\n//for the result, otherwise this will BLOCK for a result.\n//returns a buffer if successful\n//returns 0 if copy is still in process (async only)\n//returns -1 if the copy is done\n//returns -2 if there was an error\nPQ.prototype.getCopyData = function(async) {\n  return this.$getCopyData(!!async);\n};\n\nPQ.prototype.cancel = function() {\n  return this.$cancel();\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/libpq/index.js","original":{"line":1,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":2,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":3,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":4,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":5,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":6,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":7,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":8,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":9,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":10,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":11,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":12,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":13,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":14,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":15,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":16,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":17,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":18,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":19,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":20,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":21,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":22,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":23,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":24,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":25,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":26,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":27,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":28,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":29,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":30,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":31,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":32,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":33,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":34,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":35,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":36,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":37,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":38,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":39,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":40,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":41,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":42,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":43,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":44,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":45,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":46,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":47,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":48,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":49,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":50,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":51,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":52,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":53,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":54,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":55,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":56,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":57,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":58,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":59,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":60,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":61,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":62,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":63,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":64,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":65,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":66,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":67,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":68,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":69,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":70,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":71,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":72,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":73,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":74,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":75,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":76,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":77,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":78,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":79,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":80,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":81,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":82,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":83,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":84,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":85,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":86,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":87,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":88,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":89,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":90,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":91,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":92,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":93,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":94,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":95,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":96,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":97,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":98,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":99,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":100,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":101,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":102,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":103,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":104,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":105,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":106,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":107,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":108,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":109,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":110,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":111,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":112,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":113,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":114,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":115,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":116,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":117,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":118,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":119,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":120,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":121,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":122,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":123,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":124,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":125,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":126,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":127,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":128,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":129,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":130,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":131,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":132,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":133,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":134,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":135,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":136,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":137,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":138,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":139,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":140,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":141,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":142,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":143,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":144,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":145,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":146,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":147,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":148,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":149,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":150,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":151,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":152,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":153,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":154,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":155,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":156,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":157,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":158,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":159,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":160,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":161,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":162,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":163,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":164,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":165,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":166,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":167,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":168,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":169,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":170,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":171,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":172,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":173,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":174,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":175,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":176,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":177,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":178,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":179,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":180,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":181,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":182,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":183,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":184,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":185,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":186,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":187,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":188,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":189,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":190,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":191,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":192,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":193,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":194,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":195,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":196,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":197,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":198,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":199,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":200,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":201,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":202,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":203,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":204,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":205,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":206,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":207,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":208,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":209,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":210,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":211,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":212,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":213,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":214,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":215,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":216,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":217,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":218,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":219,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":220,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":221,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":222,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":223,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":224,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":225,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":226,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":227,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":228,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":229,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":230,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":231,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":232,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":233,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":234,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":235,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":236,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":237,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":238,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":239,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":240,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":241,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":242,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":243,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":244,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":245,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":246,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":247,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":248,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":249,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":250,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":251,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":252,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":253,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":254,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":255,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":256,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":257,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":258,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":259,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":260,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":261,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":262,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":263,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":264,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":265,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":266,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":267,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":268,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":269,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":270,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":271,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":272,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":273,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":274,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":275,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":276,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":277,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":278,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":279,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":280,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":281,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":282,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":283,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":284,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":285,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":286,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":287,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":288,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":289,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":290,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":291,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":292,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":293,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":294,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":295,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":296,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":297,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":298,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":299,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":300,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":301,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":302,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":303,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":304,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":305,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":306,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":307,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":308,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":309,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":310,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":311,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":312,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":313,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":314,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":315,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":316,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":317,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":318,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":319,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":320,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":321,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":322,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":323,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":324,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":325,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":326,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":327,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":328,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":329,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":330,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":331,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":332,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":333,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":334,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":335,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":336,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":337,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":338,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":339,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":340,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":341,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":342,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":343,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":344,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":345,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":346,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":347,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":348,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":349,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":350,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":351,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":352,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":353,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":354,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":355,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":356,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":357,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":358,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":359,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/libpq/index.js","original":{"line":360,"column":0},"generated":{"line":363,"column":0}}],"sources":{"../node_modules/libpq/index.js":"var PQ = module.exports = require('bindings')('addon.node').PQ;\n\n//print out the include dir\n//if you want to include this in a binding.gyp file\nif(!module.parent) {\n  var path = require('path');\n  console.log(path.normalize(__dirname + '/src'));\n}\n\nvar EventEmitter = require('events').EventEmitter;\nvar assert = require('assert');\n\nfor(var key in EventEmitter.prototype) {\n  PQ.prototype[key] = EventEmitter.prototype[key];\n}\n\n//SYNC connects to the server\n//throws an exception in the event of a connection error\nPQ.prototype.connectSync = function(paramString) {\n  this.connected = true;\n  if(!paramString) {\n    paramString = '';\n  }\n  var connected = this.$connectSync(paramString);\n  if(!connected) {\n    var err = new Error(this.errorMessage());\n    this.finish();\n    throw err;\n  }\n};\n\n//connects async using a background thread\n//calls the callback with an error if there was one\nPQ.prototype.connect = function(paramString, cb) {\n  this.connected = true;\n  if(typeof paramString == 'function') {\n    cb = paramString;\n    paramString = '';\n  }\n  if(!paramString) {\n    paramString = '';\n  }\n  assert(cb, 'Must provide a connection callback');\n  if(process.domain) {\n    cb = process.domain.bind(cb);\n  }\n  this.$connect(paramString, cb);\n};\n\nPQ.prototype.errorMessage = function() {\n  return this.$getLastErrorMessage();\n};\n\n//returns an int for the fd of the socket\nPQ.prototype.socket = function() {\n  return this.$socket();\n};\n\n// return server version number e.g. 90300\nPQ.prototype.serverVersion = function () {\n  return this.$serverVersion();\n};\n\n//finishes the connection & closes it\nPQ.prototype.finish = function() {\n  this.connected = false;\n  this.$finish();\n};\n\n////SYNC executes a plain text query\n//immediately stores the results within the PQ object for consumption with\n//ntuples, getvalue, etc...\n//returns false if there was an error\n//consume additional error details via PQ#errorMessage & friends\nPQ.prototype.exec = function(commandText) {\n  if(!commandText) {\n    commandText = '';\n  }\n  this.$exec(commandText);\n};\n\n//SYNC executes a query with parameters\n//immediately stores the results within the PQ object for consumption with\n//ntuples, getvalue, etc...\n//returns false if there was an error\n//consume additional error details via PQ#errorMessage & friends\nPQ.prototype.execParams = function(commandText, parameters) {\n  if(!commandText) {\n    commandText = '';\n  }\n  if(!parameters) {\n    parameters = [];\n  }\n  this.$execParams(commandText, parameters);\n};\n\n//SYNC prepares a named query and stores the result\n//immediately stores the results within the PQ object for consumption with\n//ntuples, getvalue, etc...\n//returns false if there was an error\n//consume additional error details via PQ#errorMessage & friends\nPQ.prototype.prepare = function(statementName, commandText, nParams) {\n  assert.equal(arguments.length, 3, 'Must supply 3 arguments');\n  if(!statementName) {\n    statementName = '';\n  }\n  if(!commandText) {\n    commandText = '';\n  }\n  nParams = Number(nParams) || 0;\n  this.$prepare(statementName, commandText, nParams);\n};\n\n//SYNC executes a named, prepared query and stores the result\n//immediately stores the results within the PQ object for consumption with\n//ntuples, getvalue, etc...\n//returns false if there was an error\n//consume additional error details via PQ#errorMessage & friends\nPQ.prototype.execPrepared = function(statementName, parameters) {\n  if(!statementName) {\n    statementName = '';\n  }\n  if(!parameters) {\n    parameters = [];\n  }\n  this.$execPrepared(statementName, parameters);\n};\n\n//send a command to begin executing a query in async mode\n//returns true if sent, or false if there was a send failure\nPQ.prototype.sendQuery = function(commandText) {\n  if(!commandText) {\n    commandText = '';\n  }\n  return this.$sendQuery(commandText);\n};\n\n//send a command to begin executing a query with parameters in async mode\n//returns true if sent, or false if there was a send failure\nPQ.prototype.sendQueryParams = function(commandText, parameters) {\n  if(!commandText) {\n    commandText = '';\n  }\n  if(!parameters) {\n    parameters = [];\n  }\n  return this.$sendQueryParams(commandText, parameters);\n};\n\n//send a command to prepare a named query in async mode\n//returns true if sent, or false if there was a send failure\nPQ.prototype.sendPrepare = function(statementName, commandText, nParams) {\n  assert.equal(arguments.length, 3, 'Must supply 3 arguments');\n  if(!statementName) {\n    statementName = '';\n  }\n  if(!commandText) {\n    commandText = '';\n  }\n  nParams = Number(nParams) || 0;\n  return this.$sendPrepare(statementName, commandText, nParams);\n};\n\n//send a command to execute a named query in async mode\n//returns true if sent, or false if there was a send failure\nPQ.prototype.sendQueryPrepared = function(statementName, parameters) {\n  if(!statementName) {\n    statementName = '';\n  }\n  if(!parameters) {\n    parameters = [];\n  }\n  return this.$sendQueryPrepared(statementName, parameters);\n};\n\n//'pops' a result out of the buffered\n//response data read during async command execution\n//and stores it on the c/c++ object so you can consume\n//the data from it.  returns true if there was a pending result\n//or false if there was no pending result. if there was no pending result\n//the last found result is not overwritten so you can call getResult as many\n//times as you want, and you'll always have the last available result for consumption\nPQ.prototype.getResult = function() {\n  return this.$getResult();\n};\n\n//returns a text of the enum associated with the result\n//usually just PGRES_COMMAND_OK or PGRES_FATAL_ERROR\nPQ.prototype.resultStatus = function() {\n  return this.$resultStatus();\n};\n\nPQ.prototype.resultErrorMessage = function() {\n  return this.$resultErrorMessage();\n};\n\nPQ.prototype.resultErrorFields = function() {\n  return this.$resultErrorFields();\n};\n\n//free the memory associated with a result\n//this is somewhat handled for you within the c/c++ code\n//by never allowing the code to 'leak' a result. still,\n//if you absolutely want to free it yourself, you can use this.\nPQ.prototype.clear = function() {\n  this.$clear();\n};\n\n//returns the number of tuples (rows) in the result set\nPQ.prototype.ntuples = function() {\n  return this.$ntuples();\n};\n\n//returns the number of fields (columns) in the result set\nPQ.prototype.nfields = function() {\n  return this.$nfields();\n};\n\n//returns the name of the field (column) at the given offset\nPQ.prototype.fname = function(offset) {\n  return this.$fname(offset);\n};\n\n//returns the Oid of the type for the given field\nPQ.prototype.ftype = function(offset) {\n  return this.$ftype(offset);\n};\n\n//returns a text value at the given row/col\n//if the value is null this still returns empty string\n//so you need to use PQ#getisnull to determine\nPQ.prototype.getvalue = function(row, col) {\n  return this.$getvalue(row, col);\n};\n\n//returns true/false if the value is null\nPQ.prototype.getisnull = function(row, col) {\n  return this.$getisnull(row, col);\n};\n\n//returns the status of the command\nPQ.prototype.cmdStatus = function() {\n  return this.$cmdStatus();\n};\n\n//returns the tuples in the command\nPQ.prototype.cmdTuples = function() {\n  return this.$cmdTuples();\n};\n\n//starts the 'read ready' libuv socket listener.\n//Once the socket becomes readable, the PQ instance starts\n//emitting 'readable' events.  Similar to how node's readable-stream\n//works except to clear the SELECT() notification you need to call\n//PQ#consumeInput instead of letting node pull the data off the socket\n//http://www.postgresql.org/docs/9.1/static/libpq-async.html\nPQ.prototype.startReader = function() {\n  assert(this.connected, 'Must be connected to start reader');\n  this.$startRead();\n};\n\n//suspends the libuv socket 'read ready' listener\nPQ.prototype.stopReader = function() {\n  this.$stopRead();\n};\n\nPQ.prototype.writable = function(cb) {\n  assert(this.connected, 'Must be connected to start writer');\n  this.$startWrite();\n  return this.once('writable', cb);\n};\n\n//returns boolean - false indicates an error condition\n//e.g. a failure to consume input\nPQ.prototype.consumeInput = function() {\n  return this.$consumeInput();\n};\n\n//returns true if PQ#getResult would cause\n//the process to block waiting on results\n//false indicates PQ#getResult can be called\n//with an assurance of not blocking\nPQ.prototype.isBusy = function() {\n  return this.$isBusy();\n};\n\n//toggles the socket blocking on outgoing writes\nPQ.prototype.setNonBlocking = function(truthy) {\n  return this.$setNonBlocking(truthy ? 1 : 0);\n};\n\n//returns true if the connection is non-blocking on writes, otherwise false\n//note: connection is always non-blocking on reads if using the send* methods\nPQ.prototype.isNonBlocking = function() {\n  return this.$isNonBlocking();\n};\n\n//returns 1 if socket is not write-ready\n//returns 0 if all data flushed to socket\n//returns -1 if there is an error\nPQ.prototype.flush = function() {\n  return this.$flush();\n};\n\n//escapes a literal and returns the escaped string\n//I'm not 100% sure this doesn't do any I/O...need to check that\nPQ.prototype.escapeLiteral = function(input) {\n  if(!input) return input;\n  return this.$escapeLiteral(input);\n};\n\nPQ.prototype.escapeIdentifier = function(input) {\n  if(!input) return input;\n  return this.$escapeIdentifier(input);\n};\n\n//Checks for any notifications which may have arrivied\n//and returns them as a javascript object: {relname: 'string', extra: 'string', be_pid: int}\n//if there are no pending notifications this returns undefined\nPQ.prototype.notifies = function() {\n  return this.$notifies();\n};\n\n//Sends a buffer of binary data to the server\n//returns 1 if the command was sent successfully\n//returns 0 if the command would block (use PQ#writable here if so)\n//returns -1 if there was an error\nPQ.prototype.putCopyData = function(buffer) {\n  assert(buffer instanceof Buffer);\n  return this.$putCopyData(buffer);\n};\n\n//Sends a command to 'finish' the copy\n//if an error message is passed, it will be sent to the\n//backend and signal a request to cancel the copy in\n//returns 1 if sent succesfully\n//returns 0 if the command would block\n//returns -1 if there was an error\nPQ.prototype.putCopyEnd = function(errorMessage) {\n  if(errorMessage) {\n    return this.$putCopyEnd(errorMessage);\n  }\n  return this.$putCopyEnd();\n};\n\n//Gets a buffer of data from a copy out command\n//if async is passed as true it will not block waiting\n//for the result, otherwise this will BLOCK for a result.\n//returns a buffer if successful\n//returns 0 if copy is still in process (async only)\n//returns -1 if the copy is done\n//returns -2 if there was an error\nPQ.prototype.getCopyData = function(async) {\n  return this.$getCopyData(!!async);\n};\n\nPQ.prototype.cancel = function() {\n  return this.$cancel();\n};\n"},"lineCount":363}},"error":null,"hash":"afbe46a6636b38811986f99ee569d55a","cacheData":{"env":{}}}